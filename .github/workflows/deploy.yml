name: Deploy Netflop

on:
  push:
    branches:
      - master
    paths:
      - "api/**"
      - "web/**"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  build_and_push_to_github_container_registry:
    name: Build API and push to Docker Hub registry
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src

    steps:
      # Checkout the Repository
      - name: Checking out the repository
        uses: actions/checkout@v3

      - name: Tracking file-change
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'api/**'
            web:
              - 'web/**'

      # Setting up Docker Builder
      - name: Set up Docker Builder
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Push to Github Container Registry
      - if: steps.changes.outputs.api == 'true'
        name: Build and push API Image to Docker Hub registry
        uses: docker/build-push-action@v4
        with:
          context: ./api
          file: api/Dockerfile
          push: true
          tags: minkoy1903/netflop_api:latest

      - if: steps.changes.outputs.web == 'true'
        name: Build WEB Image and push to Docker Hub registry
        uses: docker/build-push-action@v4
        with:
          context: ./web
          file: web/Dockerfile
          push: true
          tags: minkoy1903/netflop_web:latest

  pull_and_deploy:
    name: Pull image and deploy
    runs-on: ubuntu-latest
    needs: build_and_push_to_github_container_registry
    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.SSH_HOST }} > ~/.ssh/known_hosts

      - name: ssh to server and deploy
        run: |
          ssh ${{vars.SSH_USER}}@${{ vars.SSH_HOST }} << EOF
          cd ${{vars.WORK_DIR}}
          git checkout ${{ vars.MAIN_BRANCH }}
          git pull --rebase
          docker compose up -d
          exit
          EOF

      - name: cleanup
        run: rm -rf ~/.ssh
